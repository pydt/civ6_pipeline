#!/usr/bin/env bash

#######################
#    combine_plots    #
#######################

# This wrapper script is auto-generated by viash 0.3.2dev and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
VIASH_EXEC_MODE="run"

function ViashSetup {
:
}


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
   echo "Combine multiple images into a movie using ffmpeg."
   echo
   echo "Options:"
    echo "    -i file1:file2:..., --input=file1:file2:..."
    echo "        type: file, required parameter, multiple values allowed, default: /path/to/my/dir"
    echo "        A list of images."
    echo ""
    echo "    -o file, --output=file"
    echo "        type: file, required parameter, default: output.webm"
    echo "        A path to output the movie to."
    echo ""
    echo "    -f integer, --framerate=integer"
    echo "        type: integer, default: 4"
    echo "        Number of frames per second."
    echo ""
}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit;;
        ---setup)
            VIASH_EXEC_MODE="setup"
            shift 1
            ;;
        --input)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT="$2"
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
            fi
            shift 2
            ;;
        --input=*)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -i)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT="$2"
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
            fi
            shift 2
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --framerate)
            VIASH_PAR_FRAMERATE="$2"
            shift 2
            ;;
        --framerate=*)
            VIASH_PAR_FRAMERATE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -f)
            VIASH_PAR_FRAMERATE="$2"
            shift 2
            ;;
        *)    # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

if [ "$VIASH_EXEC_MODE" == "setup" ]; then
  ViashSetup
  exit 0
fi

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  echo '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  echo '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_FRAMERATE" ]; then
  VIASH_PAR_FRAMERATE="4"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  IFS=:
  set -f
  for file in $VIASH_PAR_INPUT; do
    unset IFS
    if [ ! -e "$file" ]; then
      echo "File '$file' does not exist."
      exit 1
    fi
  done
  set +f
fi

cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-combine_plots-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par_input='$VIASH_PAR_INPUT'
par_output='$VIASH_PAR_OUTPUT'
par_framerate='$VIASH_PAR_FRAMERATE'

resources_dir="$VIASH_RESOURCES_DIR"

#!/bin/bash

inputs=\$(echo \$par_input | tr ':' '|')
ffmpeg -framerate \$par_framerate -i "concat:\$inputs" -c:v libvpx-vp9 -pix_fmt yuva420p -y "\$par_output"
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

bash "\$tempscript"

VIASHEOF
