#!/usr/bin/env bash

##################
#    plot_map    #
##################

# This wrapper script is auto-generated by viash 0.3.2dev and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
VIASH_EXEC_MODE="run"

function ViashSetup {
:
}


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
   echo "Use the settings yaml and the map tsv to generate a plot (as PDF)."
   echo
   echo "Options:"
    echo "    -y file, --yaml=file"
    echo "        type: file, required parameter, default: header.yaml"
    echo "        A YAML file containing civ6 game settings information."
    echo ""
    echo "    -t file, --tsv=file"
    echo "        type: file, required parameter, default: map.tsv"
    echo "        A TSV file containing civ6 map information."
    echo ""
    echo "    -o file, --output=file"
    echo "        type: file, required parameter, default: output.pdf"
    echo "        Path to store the output PDF file at."
    echo ""
}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit;;
        ---setup)
            VIASH_EXEC_MODE="setup"
            shift 1
            ;;
        --yaml)
            VIASH_PAR_YAML="$2"
            shift 2
            ;;
        --yaml=*)
            VIASH_PAR_YAML=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -y)
            VIASH_PAR_YAML="$2"
            shift 2
            ;;
        --tsv)
            VIASH_PAR_TSV="$2"
            shift 2
            ;;
        --tsv=*)
            VIASH_PAR_TSV=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -t)
            VIASH_PAR_TSV="$2"
            shift 2
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        *)    # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

if [ "$VIASH_EXEC_MODE" == "setup" ]; then
  ViashSetup
  exit 0
fi

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_YAML" ]; then
  echo '--yaml' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_TSV" ]; then
  echo '--tsv' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  echo '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi


# check whether required files exist
if [ ! -z "$VIASH_PAR_YAML" ] && [ ! -e "$VIASH_PAR_YAML" ]; then
  echo "File '$VIASH_PAR_YAML' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_TSV" ] && [ ! -e "$VIASH_PAR_TSV" ]; then
  echo "File '$VIASH_PAR_TSV' does not exist."
  exit 1
fi

cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-plot_map-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par <- list(
  "yaml" = $( if [ ! -z ${VIASH_PAR_YAML+x} ]; then echo "'$VIASH_PAR_YAML'"; else echo NULL; fi ),
  "tsv" = $( if [ ! -z ${VIASH_PAR_TSV+x} ]; then echo "'$VIASH_PAR_TSV'"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

library(tidyverse)
library(cowplot)

source(paste0(resources_dir, "/helper.R"))

# par <- list(
#   yaml = "/home/rcannood/workspace/di/viash_workshop_1/data.yaml",
#   tsv = "/home/rcannood/workspace/di/viash_workshop_1/data.tsv"
# )

# read data
game_data <- read_header(par\$yaml)
map_data <- read_map(par\$tsv)

# make visualisation
g <- make_map_plot(game_data, map_data)

# save map to file
gleg <- cowplot::get_legend(g)
gnoleg <- g + theme(legend.position = "none")
gout <- cowplot::plot_grid(gnoleg, gleg, rel_widths = c(8, 1))
ggsave(par\$output, gout, width = 24, height = 13)
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
